// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Monopoly.Infrastructure.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Monopoly.Infrastructure.Migrations
{
    [DbContext(typeof(MonopolyDbContext))]
    partial class MonopolyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Monopoly.Domain.Games.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentTurnPlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("GameId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CurrentTurnPlayerId")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Monopoly.Domain.Players.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInJail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Money")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1500);

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfTurnsInJail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("TurnOrder")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.HasIndex("GameId", "Nickname")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Monopoly.Domain.Properties.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PropertyId"));

                    b.Property<int>("BaseRent")
                        .HasColumnType("integer");

                    b.Property<int>("HotelCost")
                        .HasColumnType("integer");

                    b.Property<int>("HouseCost")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MortgageValue")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("RentWithFourHouses")
                        .HasColumnType("integer");

                    b.Property<int>("RentWithHotel")
                        .HasColumnType("integer");

                    b.Property<int>("RentWithOneHouse")
                        .HasColumnType("integer");

                    b.Property<int>("RentWithThreeHouses")
                        .HasColumnType("integer");

                    b.Property<int>("RentWithTwoHouses")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("PropertyId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Monopoly.Domain.Properties.PropertyGame", b =>
                {
                    b.Property<int>("PropertyGameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PropertyGameId"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMortgaged")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("NumberOfHousesBuilt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("OwnerPlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("PropertyId")
                        .HasColumnType("integer");

                    b.HasKey("PropertyGameId");

                    b.HasIndex("GameId");

                    b.HasIndex("OwnerPlayerId");

                    b.HasIndex("PropertyId", "GameId")
                        .IsUnique();

                    b.ToTable("PropertyGames");
                });

            modelBuilder.Entity("Monopoly.Domain.Transactions.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FromPlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToPlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("TransactionId");

                    b.HasIndex("FromPlayerId");

                    b.HasIndex("GameId");

                    b.HasIndex("ToPlayerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Monopoly.Domain.Games.Game", b =>
                {
                    b.HasOne("Monopoly.Domain.Players.Player", "CurrentTurnPlayer")
                        .WithOne()
                        .HasForeignKey("Monopoly.Domain.Games.Game", "CurrentTurnPlayerId");

                    b.Navigation("CurrentTurnPlayer");
                });

            modelBuilder.Entity("Monopoly.Domain.Players.Player", b =>
                {
                    b.HasOne("Monopoly.Domain.Games.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Monopoly.Domain.Properties.PropertyGame", b =>
                {
                    b.HasOne("Monopoly.Domain.Games.Game", "Game")
                        .WithMany("Properties")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.Domain.Players.Player", "Owner")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("OwnerPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.Domain.Properties.Property", "Property")
                        .WithMany("PropertyGames")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Owner");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Monopoly.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("Monopoly.Domain.Players.Player", "FromPlayer")
                        .WithMany("InitiatedTransactions")
                        .HasForeignKey("FromPlayerId");

                    b.HasOne("Monopoly.Domain.Games.Game", "Game")
                        .WithMany("Transactions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Monopoly.Domain.Players.Player", "ToPlayer")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("ToPlayerId");

                    b.Navigation("FromPlayer");

                    b.Navigation("Game");

                    b.Navigation("ToPlayer");
                });

            modelBuilder.Entity("Monopoly.Domain.Games.Game", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Properties");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Monopoly.Domain.Players.Player", b =>
                {
                    b.Navigation("InitiatedTransactions");

                    b.Navigation("OwnedProperties");

                    b.Navigation("ReceivedTransactions");
                });

            modelBuilder.Entity("Monopoly.Domain.Properties.Property", b =>
                {
                    b.Navigation("PropertyGames");
                });
#pragma warning restore 612, 618
        }
    }
}
